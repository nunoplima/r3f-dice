/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 ./public/models/dice/dice-draco.gltf
Author: Seth Gardner (https://sketchfab.com/sethgardner)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/free-dice-model-d6-low-poly-4k-0603a7c54a6146a1b83df9a8cdb4b911
Title: Free Dice Model (D6) Low Poly 4K
*/

import { useGLTF } from '@react-three/drei'
import {
  CollisionEnterHandler,
  RapierRigidBody,
  RigidBody,
} from '@react-three/rapier'
import { ForwardedRef, forwardRef, useState } from 'react'

export const Dice = forwardRef(
  (
    { soundOn, ...otherProps }: { soundOn: boolean },
    ref: ForwardedRef<RapierRigidBody>,
  ) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const { nodes, materials }: { nodes: any; materials: any } = useGLTF(
      '/models/dice/dice-draco.gltf',
    )

    const [hitSound] = useState(() => new Audio('/audio/hit.mp3'))

    const [diceHeldSinceMs, setDiceHeldSinceMs] = useState<number>(0)

    const handleDiceToss = () => {
      if (typeof ref === 'function' || !ref?.current) return

      const diceWasHeldMicroSec = (Date.now() - diceHeldSinceMs) / 100

      ref.current.applyImpulse({ x: 0, y: 10, z: 0 }, true)
      ref.current.applyTorqueImpulse(
        {
          x: (Math.random() - 0.5) * diceWasHeldMicroSec,
          y: (Math.random() - 0.5) * diceWasHeldMicroSec,
          z: (Math.random() - 0.5) * diceWasHeldMicroSec,
        },
        true,
      )
    }

    const handleDicePick = () => {
      setDiceHeldSinceMs(Date.now())
    }

    const handleCollisionSound: CollisionEnterHandler = (e) => {
      if (e.other?.colliderObject?.name !== 'floor' || !soundOn) return

      hitSound.currentTime = 0
      hitSound.volume = Math.random()
      hitSound.play()
    }

    return (
      <RigidBody
        ref={ref}
        position={[0, 3, 0]}
        onCollisionEnter={handleCollisionSound}
      >
        <group
          dispose={null}
          onPointerEnter={() => {
            document.body.style.cursor = 'pointer'
          }}
          onPointerLeave={() => {
            document.body.style.cursor = 'default'
          }}
          {...otherProps}
        >
          <group scale={0.01}>
            <mesh
              geometry={nodes.redo_uv_Material001_0.geometry}
              material={materials['Material.001']}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={50}
              onPointerDown={handleDicePick}
              onPointerUp={handleDiceToss}
              castShadow
            />
          </group>
        </group>
      </RigidBody>
    )
  },
)

useGLTF.preload('/models/dice/dice-draco.gltf')
